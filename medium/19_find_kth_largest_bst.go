package main

import "fmt"

//–ò–Ω—Ç—É–∏—Ü–∏—è –∏ –ø–ª–∞–Ω:
//–ß—Ç–æ —Ç–∞–∫–æ–µ k-–µ –Ω–∞–∏–±–æ–ª—å—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ?
//–ï—Å–ª–∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–±—ã–≤–∞–Ω–∏—é, —Ç–æ —ç—Ç–æ –±—É–¥–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ k.
//–ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –¥–µ—Ä–µ–≤–æ —Å–æ–¥–µ—Ä–∂–∏—Ç:
//[1, 2, 3, 5, 15, 17, 20, 22], —Ç–æ:
//1-–µ –ø–æ –≤–µ–ª–∏—á–∏–Ω–µ: 22
//2-–µ –ø–æ –≤–µ–ª–∏—á–∏–Ω–µ: 20
//3-–µ –ø–æ –≤–µ–ª–∏—á–∏–Ω–µ: 17 ‚úÖ
//ü™ú –ü–ª–∞–Ω:
//–°–ø–æ—Å–æ–±: –æ–±—Ö–æ–¥ –¥–µ—Ä–µ–≤–∞ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (Right ‚Üí Node ‚Üí Left)
//–≠—Ç–æ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è reverse in-order traversal
//–û–Ω –æ–±—Ö–æ–¥–∏—Ç —É–∑–ª—ã –≤ –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è
//–°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–µ—â—ë–Ω–Ω—ã—Ö —É–∑–ª–æ–≤
//–ö–æ–≥–¥–∞ —Å—á—ë—Ç—á–∏–∫ == k, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –≤—ã—Ö–æ–¥–∏–º

// BST —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
type BST struct {
	Value int
	Left  *BST
	Right *BST
}

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –æ–±—Ö–æ–¥–µ
type TraversalState struct {
	count  int // —Å–∫–æ–ª—å–∫–æ —É–∑–ª–æ–≤ –º—ã —É–∂–µ –ø–æ—Å–µ—Ç–∏–ª–∏
	result int // –∑–Ω–∞—á–µ–Ω–∏–µ k-–≥–æ –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
}

// –ù–∞—Ö–æ–¥–∏—Ç k-–µ –ø–æ –≤–µ–ª–∏—á–∏–Ω–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ BST
func findKthLargestValueInBST(tree *BST, k int) int {
	// –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—Ä—É –≤ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ–º —Ö—Ä–∞–Ω–∏—Ç—å:
	// - —Å–∫–æ–ª—å–∫–æ —É–∑–ª–æ–≤ –º—ã —É–∂–µ –æ–±–æ—â–ª–∏ (count)
	// - —Ä–µ–∑—É–ª—å—Ç–∞—Ç (result), –∫–æ–≥–¥–∞ –¥–æ–π–¥–µ–º –¥–æ k-–≥–æ
	state := &TraversalState{
		count:  0,  // –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ
		result: -1, // –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥—ë–º, –æ—Å—Ç–∞–Ω–µ—Ç—Å—è -1
	}
	// –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –æ–±—Ö–æ–¥ –¥–µ—Ä–µ–≤–∞ —Å–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ
	reverseInOrder(tree, k, state)

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	return state.result
}

// –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–±—Ä–∞—Ç–Ω—ã–π in-order –æ–±—Ö–æ–¥: —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–∞–≤—ã–π, –ø–æ—Ç–æ–º —Ç–µ–∫—É—â–∏–π, –ø–æ—Ç–æ–º –ª–µ–≤—ã–π
func reverseInOrder(node *BST, k int, state *TraversalState) {
	// –ë–∞–∑–æ–≤—ã–π —Å–ª—É—á–∞–π: –µ—Å–ª–∏ —É–∑–µ–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –º—ã —É–∂–µ –Ω–∞—à–ª–∏ –Ω—É–∂–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî –≤—ã—Ö–æ–¥–∏–º
	if node == nil || state.count >= k {
		return
	}
	// –°–Ω–∞—á–∞–ª–∞ –∏–¥—ë–º –≤ –ü–†–ê–í–û–ï –ø–æ–¥–¥–µ—Ä–µ–≤–æ ‚Äî —Ç–∞–º –ª–µ–∂–∞—Ç —Å–∞–º—ã–µ –±–æ–ª—å—à–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
	reverseInOrder(node.Right, k, state)
	// –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã –µ—â—ë –Ω–µ –Ω–∞—à–ª–∏ k-–π —ç–ª–µ–º–µ–Ω—Ç
	if state.count < k {
		// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ ‚Äî –º—ã "–ø–æ—Å–µ—Ç–∏–ª–∏" —Ç–µ–∫—É—â–∏–π —É–∑–µ–ª
		state.count++

		// –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ k-–π —É–∑–µ–ª ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
		if state.count == k {
			state.result = node.Value
			return // –º–æ–∂–Ω–æ –≤—ã–π—Ç–∏ ‚Äî –≤—Å—ë –Ω–∞–π–¥–µ–Ω–æ
		}
	}
	// –ó–∞—Ç–µ–º –∏–¥—ë–º –≤ –õ–ï–í–û–ï –ø–æ–¥–¥–µ—Ä–µ–≤–æ ‚Äî —Ç–∞–º –ª–µ–∂–∞—Ç –º–µ–Ω—å—à–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
	reverseInOrder(node.Left, k, state)
}

//–°–ª–æ–∂–Ω–æ—Å—Ç—å:
//–í—Ä–µ–º—è: O(h + k) –≥–¥–µ h ‚Äî –≤—ã—Å–æ—Ç–∞ –¥–µ—Ä–µ–≤–∞
//–ü–∞–º—è—Ç—å: O(h) –∏–∑-–∑–∞ —Å—Ç–µ–∫–∞ –≤—ã–∑–æ–≤–∞ (–≥–ª—É–±–∏–Ω–∞ –¥–µ—Ä–µ–≤–∞)

func main() {
	/*
	         15
	        /  \
	       5    20
	      / \   / \
	     2   5 17 22
	    / \
	   1   3
	*/
	tree := &BST{Value: 15}
	tree.Left = &BST{Value: 5}
	tree.Left.Left = &BST{Value: 2}
	tree.Left.Left.Left = &BST{Value: 1}
	tree.Left.Left.Right = &BST{Value: 3}
	tree.Left.Right = &BST{Value: 5}
	tree.Right = &BST{Value: 20}
	tree.Right.Left = &BST{Value: 17}
	tree.Right.Right = &BST{Value: 22}
	k := 3
	fmt.Println(findKthLargestValueInBST(tree, k)) // Output: 17
}
