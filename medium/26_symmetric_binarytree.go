// ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ—Å—Ç–∏ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞
//
// üß† –ò–Ω—Ç—É–∏—Ü–∏—è:
// –î–µ—Ä–µ–≤–æ —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ, –µ—Å–ª–∏ –µ–≥–æ –ª–µ–≤–æ–µ –∏ –ø—Ä–∞–≤–æ–µ –ø–æ–¥–¥–µ—Ä–µ–≤—å—è ‚Äî –∑–µ—Ä–∫–∞–ª—å–Ω—ã–µ –æ—Ç—Ä–∞–∂–µ–Ω–∏—è –¥—Ä—É–≥ –¥—Ä—É–≥–∞.
// –≠—Ç–æ –∑–Ω–∞—á–∏—Ç:
// - –õ–µ–≤–æ–µ –ø–æ–¥–¥–µ—Ä–µ–≤–æ –ª–µ–≤–æ–≥–æ —É–∑–ª–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–µ—Ä–∫–∞–ª—å–Ω–æ –ø—Ä–∞–≤–æ–º—É –ø–æ–¥–¥–µ—Ä–µ–≤—É –ø—Ä–∞–≤–æ–≥–æ —É–∑–ª–∞
// - –ó–Ω–∞—á–µ–Ω–∏—è –≤ —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏
//
// üìå –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç:
//   isMirror(left, right)
//   - –µ—Å–ª–∏ –æ–±–∞ nil ‚Üí true
//   - –µ—Å–ª–∏ –æ–¥–∏–Ω nil, –¥—Ä—É–≥–æ–π –Ω–µ—Ç ‚Üí false
//   - –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è —Ä–∞–∑–Ω—ã–µ ‚Üí false
//   - –∏–Ω–∞—á–µ: —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º left.Left vs right.Right –∏ left.Right vs right.Left
//
// üìù –†—É—á–Ω–æ–π –ø—Ä–æ–≥–æ–Ω:
// tree =
//         1
//       /   \
//      2     2
//     / \   / \
//    3  4  4   3
//   / \    \ /  \
//  5   6   6 5
//
// –ü—Ä–æ–≤–µ—Ä–∫–∞:
// - 2 –∏ 2 ‚Üí ok
// - 3 –∏ 3 ‚Üí ok
// - 5 –∏ 5, 6 –∏ 6 ‚Üí ok
// - 4 –∏ 4 ‚Üí ok
// ‚úÖ –í—Å—ë —Å–æ–≤–ø–∞–¥–∞–µ—Ç –∑–µ—Ä–∫–∞–ª—å–Ω–æ ‚Üí true
//
// ‚è± –°–ª–æ–∂–Ω–æ—Å—Ç—å:
// –í—Ä–µ–º—è: O(n) ‚Äî –∫–∞–∂–¥—ã–π —É–∑–µ–ª –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑
// –ü–∞–º—è—Ç—å: O(h) ‚Äî –≥–ª—É–±–∏–Ω–∞ –¥–µ—Ä–µ–≤–∞ (—Å—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤)

package main

import "fmt"

// BinaryTree ‚Äî —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —É–∑–ª–∞ –¥–µ—Ä–µ–≤–∞
type BinaryTree struct {
	Value int
	Left  *BinaryTree
	Right *BinaryTree
}

// ‚úÖ –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ –ª–∏ –¥–µ—Ä–µ–≤–æ
func (tree *BinaryTree) IsSymmetric() bool {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–µ—Ä–∫–∞–ª—å–Ω—ã –ª–∏ –ª–µ–≤–æ–µ –∏ –ø—Ä–∞–≤–æ–µ –ø–æ–¥–¥–µ—Ä–µ–≤—å—è –∫–æ—Ä–Ω—è
	return isMirror(tree.Left, tree.Right)
}

// üîÅ –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –¥–≤–∞ –ø–æ–¥–¥–µ—Ä–µ–≤–∞ –∑–µ—Ä–∫–∞–ª—å–Ω–æ
func isMirror(left, right *BinaryTree) bool {
	// –û–±–∞ —É–∑–ª–∞ –ø—É—Å—Ç—ã ‚Üí —ç—Ç–æ —Å–∏–º–º–µ—Ç—Ä–∏—è
	if left == nil && right == nil {
		return true
	}
	// –û–¥–∏–Ω –µ—Å—Ç—å, –¥—Ä—É–≥–æ–≥–æ –Ω–µ—Ç ‚Üí –Ω–µ—Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ
	if left == nil || right == nil {
		return false
	}
	// –ó–Ω–∞—á–µ–Ω–∏—è —Ä–∞–∑–Ω—ã–µ ‚Üí –Ω–µ—Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ
	if left.Value != right.Value {
		return false
	}
	// –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤–Ω–µ—à–Ω–∏–µ –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –ø–∞—Ä—ã —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ:
	// left.Left —Å right.Right –∏ left.Right —Å right.Left
	return isMirror(left.Left, right.Right) && isMirror(left.Right, right.Left)
}

func main() {
	// –ü—Ä–∏–º–µ—Ä —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞ –∏–∑ —É—Å–ª–æ–≤–∏—è
	tree := &BinaryTree{Value: 1}
	tree.Left = &BinaryTree{Value: 2}
	tree.Right = &BinaryTree{Value: 2}
	tree.Left.Left = &BinaryTree{Value: 3}
	tree.Left.Right = &BinaryTree{Value: 4}
	tree.Right.Left = &BinaryTree{Value: 4}
	tree.Right.Right = &BinaryTree{Value: 3}
	tree.Left.Left.Left = &BinaryTree{Value: 5}
	tree.Left.Left.Right = &BinaryTree{Value: 6}
	tree.Right.Right.Left = &BinaryTree{Value: 6}
	tree.Right.Right.Right = &BinaryTree{Value: 5}

	fmt.Println("Is Symmetric:", tree.IsSymmetric()) // true
}
