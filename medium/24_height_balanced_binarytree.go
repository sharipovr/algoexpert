// ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –±–∏–Ω–∞—Ä–Ω–æ–µ –¥–µ—Ä–µ–≤–æ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ –≤—ã—Å–æ—Ç–µ
//
// üß† –ò–Ω—Ç—É–∏—Ü–∏—è:
// –í—ã—Å–æ—Ç–Ω–æ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –¥–µ—Ä–µ–≤–æ ‚Äî —ç—Ç–æ –¥–µ—Ä–µ–≤–æ, –≥–¥–µ —É –∫–∞–∂–¥–æ–≥–æ —É–∑–ª–∞
// —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –≤—ã—Å–æ—Ç–∞–º–∏ –ª–µ–≤–æ–≥–æ –∏ –ø—Ä–∞–≤–æ–≥–æ –ø–æ–¥–¥–µ—Ä–µ–≤—å–µ–≤ –Ω–µ –±–æ–ª—å—à–µ 1.
// –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º post-order DFS (–æ–±—Ö–æ–¥ —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö):
// 1. –í—ã—á–∏—Å–ª—è–µ–º –≤—ã—Å–æ—Ç—É –ª–µ–≤–æ–≥–æ –∏ –ø—Ä–∞–≤–æ–≥–æ –ø–æ–¥–¥–µ—Ä–µ–≤—å–µ–≤ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
// 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω –ª–∏ —Ç–µ–∫—É—â–∏–π —É–∑–µ–ª
// 3. –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –Ω–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω ‚Äî –≤—Å—ë –¥–µ—Ä–µ–≤–æ –Ω–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–æ
//
// üìù –†—É—á–Ω–æ–π –ø—Ä–æ–≥–æ–Ω:
//         1
//        / \
//       2   3
//      /     \
//     4       6
//    / \
//   7   8
//
// - —É–∑–ª—ã 7 –∏ 8 ‚Üí –≤—ã—Å–æ—Ç–∞ 1
// - —É–∑–µ–ª 4 ‚Üí –≤—ã—Å–æ—Ç–∞ 2, —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω (1 vs 1)
// - —É–∑–µ–ª 2 ‚Üí –≤—ã—Å–æ—Ç–∞ 3, –ø—Ä–∞–≤–æ–µ –ø–æ–¥–¥–µ—Ä–µ–≤–æ –ø—É—Å—Ç–æ ‚Üí diff = 3 - 0 = 3 ‚ùå
// - –Ω–æ –µ—Å–ª–∏ —É 2 –±—É–¥–µ—Ç –ø—Ä–∞–≤—ã–π –ø–æ—Ç–æ–º–æ–∫ ‚Äî –º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º
//
// ‚è± –°–ª–æ–∂–Ω–æ—Å—Ç—å:
// –í—Ä–µ–º—è: O(n), –∫–∞–∂–¥—ã–π —É–∑–µ–ª –ø–æ—Å–µ—â–∞–µ—Ç—Å—è 1 —Ä–∞–∑
// –ü–∞–º—è—Ç—å: O(h), —Å—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤ –ø–æ –≥–ª—É–±–∏–Ω–µ –¥–µ—Ä–µ–≤–∞

package main

import (
	"fmt"
	"math"
)

// BinaryTree ‚Äî —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —É–∑–ª–∞ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞
type BinaryTree struct {
	Value int
	Left  *BinaryTree
	Right *BinaryTree
}

// ‚úÖ –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –¥–µ—Ä–µ–≤–∞
func (tree *BinaryTree) IsBalanced() bool {
	// –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –æ—Ç –∫–æ—Ä–Ω—è
	// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤—ã—Å–æ—Ç–∞ –∏ –±—É–ª–µ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ
	_, isBalanced := checkHeight(tree)
	return isBalanced
}

// üîß –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (–≤—ã—Å–æ—Ç–∞ –ø–æ–¥–¥–µ—Ä–µ–≤–∞, true/false ‚Äî —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–æ –ª–∏ –æ–Ω–æ)
func checkHeight(node *BinaryTree) (int, bool) {
	// –ë–∞–∑–æ–≤—ã–π —Å–ª—É—á–∞–π: –ø—É—Å—Ç–æ–µ –¥–µ—Ä–µ–≤–æ
	if node == nil {
		return 0, true // –í—ã—Å–æ—Ç–∞ 0, —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–æ
	}

	// –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–µ–≤–æ–µ –ø–æ–¥–¥–µ—Ä–µ–≤–æ
	leftHeight, leftBalanced := checkHeight(node.Left)
	// –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–æ–µ –ø–æ–¥–¥–µ—Ä–µ–≤–æ
	rightHeight, rightBalanced := checkHeight(node.Right)

	// –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∏–∑ –ø–æ–¥–¥–µ—Ä–µ–≤—å–µ–≤ –Ω–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–æ ‚Äî —Å—Ä–∞–∑—É –≤—ã—Ö–æ–¥–∏–º
	if !leftBalanced || !rightBalanced {
		return 0, false
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å —Ç–µ–∫—É—â–µ–≥–æ —É–∑–ª–∞ –ø–æ —Ä–∞–∑–Ω–∏—Ü–µ –≤—ã—Å–æ—Ç
	if math.Abs(float64(leftHeight-rightHeight)) > 1 {
		return 0, false // –ù–∞—Ä—É—à–µ–Ω –±–∞–ª–∞–Ω—Å
	}

	// –í—Å—ë –æ–∫ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ–≤—É—é –≤—ã—Å–æ—Ç—É –∏ true
	return 1 + max(leftHeight, rightHeight), true
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –º–∞–∫—Å–∏–º—É–º–∞
func max(a, b int) int {
	if a > b {
		return a
	}
	return b
}

func main() {
	// –°–±–æ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–µ—Ä–µ–≤–∞ –∏–∑ —É—Å–ª–æ–≤–∏—è:
	//         1
	//        / \
	//       2   3
	//      /     \
	//     4       6
	//    / \
	//   7   8

	tree := &BinaryTree{Value: 1}
	tree.Left = &BinaryTree{Value: 2}
	tree.Right = &BinaryTree{Value: 3}
	tree.Left.Left = &BinaryTree{Value: 4}
	tree.Left.Left.Left = &BinaryTree{Value: 7}
	tree.Left.Left.Right = &BinaryTree{Value: 8}
	tree.Right.Right = &BinaryTree{Value: 6}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
	fmt.Println("Is Balanced:", tree.IsBalanced()) // true
}
