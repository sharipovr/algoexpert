// ‚úÖ –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–≤—É—Ö –±–∏–Ω–∞—Ä–Ω—ã—Ö –¥–µ—Ä–µ–≤—å–µ–≤ –≤ –æ–¥–Ω–æ
//
// üß† –ò–Ω—Ç—É–∏—Ü–∏—è:
// –ï—Å–ª–∏ –≤ –æ–¥–Ω–æ–π –∏ —Ç–æ–π –∂–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ –¥–≤—É—Ö –¥–µ—Ä–µ–≤—å—è—Ö –µ—Å—Ç—å —É–∑–ª—ã,
// –∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è —Å–∫–ª–∞–¥—ã–≤–∞—é—Ç—Å—è. –ï—Å–ª–∏ —É–∑–µ–ª –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –≤ –æ–¥–Ω–æ–º –¥–µ—Ä–µ–≤–µ ‚Äî –æ–Ω –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å.
// –ú—ã –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∫—É—Ä—Å–∏—é, –ø—Ä–æ—Ö–æ–¥—è –ø–æ –æ–±–æ–∏–º –¥–µ—Ä–µ–≤—å—è–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.
//
// üìå –ü—Ä–∞–≤–∏–ª–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è:
// - –ï—Å–ª–∏ –æ–±–∞ —É–∑–ª–∞ —Å—É—â–µ—Å—Ç–≤—É—é—Ç ‚Üí sum = t1.Val + t2.Val
// - –ï—Å–ª–∏ –æ–¥–∏–Ω –∏–∑ —É–∑–ª–æ–≤ nil ‚Üí –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥—Ä—É–≥–æ–π
//
// üìù –†—É—á–Ω–æ–π –ø—Ä–æ–≥–æ–Ω:
// tree1 =         1         tree2 =         1
//               / \                     / \
//              3   2                   5   9
//             / \                       / \
//            7   4                     2   7
//                                      \   \
//                                       6   6
//
// ‚Üí merged =       2
//                /   \
//               8     11
//              / \    / \
//             9   4  7   6
//
// ‚è± –°–ª–æ–∂–Ω–æ—Å—Ç—å:
// –í—Ä–µ–º—è: O(n), –≥–¥–µ n ‚Äî –æ–±—â–µ–µ —á–∏—Å–ª–æ —É–∑–ª–æ–≤ –≤ –æ–±–æ–∏—Ö –¥–µ—Ä–µ–≤—å—è—Ö (–ø—Ä–æ—Ö–æ–¥–∏–º –≤—Å—ë)
// –ü–∞–º—è—Ç—å: O(h), –≥–ª—É–±–∏–Ω–∞ —Ä–µ–∫—É—Ä—Å–∏–∏ (h ‚Äî –≤—ã—Å–æ—Ç–∞ —Å–∞–º–æ–≥–æ –≥–ª—É–±–æ–∫–æ–≥–æ –¥–µ—Ä–µ–≤–∞)

package main

import "fmt"

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞
type BinaryTree struct {
	Value int
	Left  *BinaryTree
	Right *BinaryTree
}

// ‚úÖ –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –¥–µ—Ä–µ–≤—å–µ–≤
func MergeBinaryTrees(tree1, tree2 *BinaryTree) *BinaryTree {
	// –ë–∞–∑–æ–≤—ã–π —Å–ª—É—á–∞–π: –µ—Å–ª–∏ –æ–¥–∏–Ω –∏–∑ —É–∑–ª–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥—Ä—É–≥–æ–π
	if tree1 == nil {
		return tree2
	}
	if tree2 == nil {
		return tree1
	}

	// –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —É–∑–µ–ª, —Å–∫–ª–∞–¥—ã–≤–∞—è –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –¥–≤—É—Ö —É–∑–ª–æ–≤
	merged := &BinaryTree{Value: tree1.Value + tree2.Value}

	// –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—ä–µ–¥–∏–Ω—è–µ–º –ª–µ–≤–æ–µ –ø–æ–¥–¥–µ—Ä–µ–≤–æ
	merged.Left = MergeBinaryTrees(tree1.Left, tree2.Left)

	// –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—ä–µ–¥–∏–Ω—è–µ–º –ø—Ä–∞–≤–æ–µ –ø–æ–¥–¥–µ—Ä–µ–≤–æ
	merged.Right = MergeBinaryTrees(tree1.Right, tree2.Right)

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ—Ä–µ–Ω—å –Ω–æ–≤–æ–≥–æ –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞
	return merged
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—á–∞—Ç–∏ –¥–µ—Ä–µ–≤–∞ in-order
func PrintInOrder(tree *BinaryTree) {
	if tree == nil {
		return
	}
	PrintInOrder(tree.Left)
	fmt.Print(tree.Value, " ")
	PrintInOrder(tree.Right)
}

func main() {
	// –ü—Ä–∏–º–µ—Ä –∏–∑ –∑–∞–¥–∞—á–∏
	t1 := &BinaryTree{Value: 1}
	t1.Left = &BinaryTree{Value: 3}
	t1.Right = &BinaryTree{Value: 2}
	t1.Left.Left = &BinaryTree{Value: 7}
	t1.Left.Right = &BinaryTree{Value: 4}

	t2 := &BinaryTree{Value: 1}
	t2.Left = &BinaryTree{Value: 5}
	t2.Right = &BinaryTree{Value: 9}
	t2.Left.Left = &BinaryTree{Value: 2}
	t2.Right.Left = &BinaryTree{Value: 7}
	t2.Right.Right = &BinaryTree{Value: 6}

	merged := MergeBinaryTrees(t1, t2)

	fmt.Print("Merged in-order: ")
	PrintInOrder(merged)
	fmt.Println()
}
