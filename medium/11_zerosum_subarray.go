package main

import "fmt"

func zeroSumSubarray(arr []int) bool {
	// Интуиция: проверить, существует ли подмассив, сумма которого равна нулю.
	// Используем хеш-таблицу (мапу, сет)
	// Идём по массиву и накапливаем сумму.
	// Если в какой-то момент сумма = 0 → нашли подмассив от начала, вернем true
	// Если встретили ту же сумму, которая уже была, значит
	// элементы между (текущим и тем когда была записана такая же сумма в прошлый раз)
	// формируют нужный подмассив (суммируемый в ноль), тоже вернем true
	// Если после сканирования массива ничего не нашли -> вернем false
	// Complexity: time O(n), space O(n)
	// Edge cases: пустой массив, все числа положительные, один элемент = 0

	prefixSum := make(map[int]bool)
	sum := 0
	for _, value := range arr {
		sum += value // накапливаем сумму

		if sum == 0 {
			// нашли подмассив от начала
			return true
		}
		if prefixSum[sum] {
			// такая сумма уже была, значит нашли подмассив в промежутке
			return true
		}
		// сохраняем сумму в мапу
		prefixSum[sum] = true
	}
	// ничего не нашли
	return false
}

func main() {
	nums := []int{-5, -5, 2, 3, -2}
	result := zeroSumSubarray(nums)
	fmt.Println(result) // true
}
