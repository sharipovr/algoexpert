package main

import "fmt"

type BST17 struct {
	Value int
	Left  *BST17
	Right *BST17
}

// üîµ In-order (–õ–µ–≤–æ ‚Üí –£–∑–µ–ª ‚Üí –ü—Ä–∞–≤–æ)
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–µ—Å–ª–∏ –¥–µ—Ä–µ–≤–æ –≤–∞–ª–∏–¥–Ω–æ–µ BST17)
func (tree *BST17) InOrderTraverse(array []int) []int {
	if tree != nil {
		// –°–Ω–∞—á–∞–ª–∞ –æ–±—Ö–æ–¥–∏–º –ª–µ–≤–æ–µ –ø–æ–¥–¥–µ—Ä–µ–≤–æ
		array = tree.Left.InOrderTraverse(array)

		// –ü–æ—Ç–æ–º –¥–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —É–∑–ª–∞
		// –ó–∞—á–µ–º: –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º in-order, –º—ã –æ–±—Ö–æ–¥–∏–º —Å–Ω–∞—á–∞–ª–∞ –ª–µ–≤—É—é —á–∞—Å—Ç—å, –ø–æ—Ç–æ–º —Ç–µ–∫—É—â–∏–π —É–∑–µ–ª
		array = append(array, tree.Value)

		// –ó–∞—Ç–µ–º –æ–±—Ö–æ–¥–∏–º –ø—Ä–∞–≤–æ–µ –ø–æ–¥–¥–µ—Ä–µ–≤–æ
		array = tree.Right.InOrderTraverse(array)
	}
	return array // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –Ω–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ
}

// üî¥ Pre-order (–£–∑–µ–ª ‚Üí –õ–µ–≤–æ ‚Üí –ü—Ä–∞–≤–æ)
// –ü–æ–ª–µ–∑–µ–Ω, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å/–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–µ—Ä–µ–≤–∞
func (tree *BST17) PreOrderTraverse(array []int) []int {
	if tree != nil {
		// –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —É–∑–µ–ª
		// –ó–∞—á–µ–º: pre-order ‚Äî —Å–Ω–∞—á–∞–ª–∞ —Ç–µ–∫—É—â–∏–π, –ø–æ—Ç–æ–º –µ–≥–æ –ø–æ–¥–¥–µ—Ä–µ–≤—å—è
		array = append(array, tree.Value)

		// –û–±—Ö–æ–¥–∏–º –ª–µ–≤–æ–µ –ø–æ–¥–¥–µ—Ä–µ–≤–æ
		array = tree.Left.PreOrderTraverse(array)

		// –û–±—Ö–æ–¥–∏–º –ø—Ä–∞–≤–æ–µ –ø–æ–¥–¥–µ—Ä–µ–≤–æ
		array = tree.Right.PreOrderTraverse(array)
	}
	return array
}

// üü¢ Post-order (–õ–µ–≤–æ ‚Üí –ü—Ä–∞–≤–æ ‚Üí –£–∑–µ–ª)
// –ü–æ–ª–µ–∑–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–µ—Ä–µ–≤–∞ –∏–ª–∏ —Ä–∞–±–æ—Ç—ã "—Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö"
func (tree *BST17) PostOrderTraverse(array []int) []int {
	if tree != nil {
		// –°–Ω–∞—á–∞–ª–∞ –æ–±—Ö–æ–¥–∏–º –ª–µ–≤–æ–µ –ø–æ–¥–¥–µ—Ä–µ–≤–æ
		array = tree.Left.PostOrderTraverse(array)

		// –ü–æ—Ç–æ–º –æ–±—Ö–æ–¥–∏–º –ø—Ä–∞–≤–æ–µ –ø–æ–¥–¥–µ—Ä–µ–≤–æ
		array = tree.Right.PostOrderTraverse(array)

		// –ü–æ—Ç–æ–º –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —É–∑–µ–ª
		// –ó–∞—á–µ–º: post-order ‚Äî –≤—Å–µ–≥–¥–∞ –∑–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ö–æ–¥ –≤–Ω–∏–∑—É
		array = append(array, tree.Value)
	}
	return array
}

func main() {
	tree := &BST17{
		Value: 10,
		Left: &BST17{
			Value: 5,
			Left: &BST17{
				Value: 2,
				Left:  &BST17{Value: 1},
			},
			Right: &BST17{Value: 5},
		},
		Right: &BST17{
			Value: 15,
			Right: &BST17{Value: 22},
		},
	}

	/*
	        10
	       /  \
	      5    15
	     / \     \
	    2   5     22
	   /
	  1
	*/

	fmt.Println("InOrder:   ", tree.InOrderTraverse([]int{}))   // [1 2 5 5 10 15 22]
	fmt.Println("PreOrder:  ", tree.PreOrderTraverse([]int{}))  // [10 5 2 1 5 15 22]
	fmt.Println("PostOrder: ", tree.PostOrderTraverse([]int{})) // [1 2 5 5 22 15 10]
}
