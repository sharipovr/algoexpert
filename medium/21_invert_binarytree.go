package main

import "fmt"

// –ò–Ω—Ç—É–∏—Ü–∏—è:
// –ò–¥–µ—è –ø—Ä–æ—Å—Ç–∞—è:
// –£ –∫–∞–∂–¥–æ–≥–æ —É–∑–ª–∞ –ø–æ–º–µ–Ω—è—Ç—å –º–µ—Å—Ç–∞–º–∏ left –∏ right
// –ü—Ä–æ–¥–µ–ª–∞—Ç—å —ç—Ç–æ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏–ª–∏ –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ (—á–µ—Ä–µ–∑ —Å—Ç–µ–∫/–æ—á–µ—Ä–µ–¥—å) –¥–ª—è –≤—Å–µ—Ö —É–∑–ª–æ–≤ –¥–µ—Ä–µ–≤–∞
// üì¶ –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–ª–∞–Ω:
// –ï—Å–ª–∏ node == nil, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º nil
// –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ª–µ–≤–æ–µ –∏ –ø—Ä–∞–≤–æ–µ –ø–æ–¥–¥–µ—Ä–µ–≤—å—è
// –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ node.left –∏ node.right
// –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–∏–π —É–∑–µ–ª

// –£–∑–µ–ª –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞
type BinaryTree struct {
	Value int
	Left  *BinaryTree
	Right *BinaryTree
}

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –¥–µ—Ä–µ–≤–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä–µ–Ω—å
func (tree *BinaryTree) invertBinaryTree() {
	if tree == nil {
		return // –ï—Å–ª–∏ –¥–µ—Ä–µ–≤–æ –ø—É—Å—Ç–æ–µ - –Ω–∏—á–µ–≥–æ –¥–µ–ª–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ
	}

	// –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ª–µ–≤–æ–µ –∏ –ø—Ä–∞–≤–æ–µ –ø–æ–¥–¥–µ—Ä–µ–≤—å—è
	tree.Left.invertBinaryTree()
	tree.Right.invertBinaryTree()

	// –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏
	tree.Left, tree.Right = tree.Right, tree.Left
}

func main() {
	// –°—Ç—Ä–æ–∏–º –¥–µ—Ä–µ–≤–æ –∏–∑ –ø—Ä–∏–º–µ—Ä–∞
	tree := &BinaryTree{Value: 1}
	tree.Left = &BinaryTree{Value: 2}
	tree.Right = &BinaryTree{Value: 3}
	tree.Left.Left = &BinaryTree{Value: 4}
	tree.Left.Right = &BinaryTree{Value: 5}
	tree.Right.Left = &BinaryTree{Value: 6}
	tree.Right.Right = &BinaryTree{Value: 7}
	tree.Left.Left.Left = &BinaryTree{Value: 8}
	tree.Left.Left.Right = &BinaryTree{Value: 9}

	tree.invertBinaryTree()

	// –ü–µ—á–∞—Ç–∞–µ–º –æ–±—Ö–æ–¥ –¥–µ—Ä–µ–≤–∞ (in-order) –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
	fmt.Println("InOrder –ø–æ—Å–ª–µ –∏–Ω–≤–µ—Ä—Å–∏–∏:", inOrder(tree, []int{}))
}

// In-order –æ–±—Ö–æ–¥ –¥–µ—Ä–µ–≤–∞ (—Å–ª–µ–≤–∞ ‚Üí —É–∑–µ–ª ‚Üí —Å–ø—Ä–∞–≤–∞)
func inOrder(tree *BinaryTree, result []int) []int {
	if tree != nil {
		result = inOrder(tree.Left, result)
		result = append(result, tree.Value)
		result = inOrder(tree.Right, result)
	}
	return result
}

/*
        1
       / \
      2   3
     / \ / \
    4  5 6  7
   / \
  8   9

*/
