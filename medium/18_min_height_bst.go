package main

import "fmt"

// –ò–Ω—Ç—É–∏—Ü–∏—è –∏ –ø–ª–∞–Ω:
// –ß—Ç–æ–±—ã BST18 –∏–º–µ–ª–æ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –≤—ã—Å–æ—Ç—É, –¥–µ—Ä–µ–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º ‚Äî —Ç–æ –µ—Å—Ç—å:
// –ö–æ—Ä–Ω–µ–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–µ—Ä–µ–¥–∏–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
// –õ–µ–≤–æ–µ –ø–æ–¥–¥–µ—Ä–µ–≤–æ —Å—Ç—Ä–æ–∏–º –∏–∑ –ª–µ–≤–æ–π —á–∞—Å—Ç–∏ –º–∞—Å—Å–∏–≤–∞
// –ü—Ä–∞–≤–æ–µ –ø–æ–¥–¥–µ—Ä–µ–≤–æ ‚Äî –∏–∑ –ø—Ä–∞–≤–æ–π —á–∞—Å—Ç–∏ –º–∞—Å—Å–∏–≤–∞
// –≠—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ –ø—Ä–∏–Ω—Ü–∏–ø –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ üîç ‚Äî —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –¥–µ–ª–∏–º –º–∞—Å—Å–∏–≤ –Ω–∞ –ø–æ–ø–æ–ª–∞–º –∏ —Å—Ç—Ä–æ–∏–º –¥–µ—Ä–µ–≤–æ.
// –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–ª–∞–Ω:
// –í—ã–±–∏—Ä–∞–µ–º —Å–µ—Ä–µ–¥–∏–Ω—É –º–∞—Å—Å–∏–≤–∞ ‚Üí —Å–æ–∑–¥–∞—ë–º —É–∑–µ–ª
// –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–æ–∑–¥–∞—ë–º –ª–µ–≤–æ–µ –ø–æ–¥–¥–µ—Ä–µ–≤–æ –∏–∑ –ª–µ–≤–æ–π —á–∞—Å—Ç–∏
// –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–æ–∑–¥–∞—ë–º –ø—Ä–∞–≤–æ–µ –ø–æ–¥–¥–µ—Ä–µ–≤–æ –∏–∑ –ø—Ä–∞–≤–æ–π —á–∞—Å—Ç–∏
// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ—Ä–µ–Ω—å –¥–µ—Ä–µ–≤–∞

// üî¢ –ü—Ä–∏–º–µ—Ä:
// array := [1, 2, 5, 7, 10, 13, 14, 15, 22]
// –ö–æ—Ä–µ–Ω—å: 10 (—Å–µ—Ä–µ–¥–∏–Ω–∞)
// –õ–µ–≤–æ: [1, 2, 5, 7] ‚Üí –∫–æ—Ä–µ–Ω—å 2
// –ü—Ä–∞–≤–æ: [13, 14, 15, 22] ‚Üí –∫–æ—Ä–µ–Ω—å 14
// –ò —Ç–∞–∫ –¥–∞–ª–µ–µ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ...

type BST18 struct {
	Value int
	Left  *BST18
	Right *BST18
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ BST18 –∏–∑ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
func minHeightBST18(arr []int) *BST18 {
	return constructMinHeightBST18(arr, 0, len(arr)-1)
}

func constructMinHeightBST18(arr []int, start, end int) *BST18 {
	if start > end {
		return nil // –±–∞–∑–æ–≤—ã–π —Å–ª—É—á–∞–π: –ø—É—Å—Ç–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω ‚Üí –Ω–µ—Ç —É–∑–ª–∞
	}

	// –í—ã–±–∏—Ä–∞–µ–º —Å–µ—Ä–µ–¥–∏–Ω—É ‚Äî —ç—Ç–æ —Å—Ç–∞–Ω–µ—Ç –∫–æ—Ä–Ω–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–¥–¥–µ—Ä–µ–≤–∞
	mid := (start + end) / 2
	node := &BST18{Value: arr[mid]}

	// –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å—Ç—Ä–æ–∏–º –ª–µ–≤–æ–µ –∏ –ø—Ä–∞–≤–æ–µ –ø–æ–¥–¥–µ—Ä–µ–≤—å—è
	node.Left = constructMinHeightBST18(arr, start, mid-1)
	node.Right = constructMinHeightBST18(arr, mid+1, end)

	return node
}

// –§—É–Ω–∫—Ü–∏—è –Ω—É–∂–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ü–µ–ª–µ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, —Å–º.–∑–∞–¥–∞—á—É 17
func (tree *BST18) InOrderTraverse(array []int) []int {
	if tree != nil {
		array = tree.Left.InOrderTraverse(array)
		array = append(array, tree.Value)
		array = tree.Right.InOrderTraverse(array)
	}
	return array
}

func main() {
	array := []int{1, 2, 5, 7, 10, 13, 14, 15, 22}
	root := minHeightBST18(array)

	// –ü—Ä–æ–≤–µ—Ä–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –æ–±—Ö–æ–¥–æ–º
	fmt.Println("InOrder: ", root.InOrderTraverse([]int{})) // [1 2 5 7 10 13 14 15 22]
}
