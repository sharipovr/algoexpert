package main

import "fmt"

func bestSeat(arr []int) int {

	// Задача — найти лучшее место для сидения в ряду, представленном массивом
	// из 0 и 1. Нужно выбрать позицию среди подряд идущих нулей,
	// которая находится максимально далеко от занятых мест.
	// Предпочтение отдаётся центру самой длинной последовательности нулей.
	// Если несколько вариантов равны, выбираем тот, что раньше по индексу.
	// Edge-кейсы:
	// нет свободных мест ([1,1,1]) → -1
	// Все места свободны, кроме краёв ([1,0,0,0,1]) → выбираем середину
	// Несколько групп нулей, берём с наибольшей длиной
	// Сложность:
	// Время: O(n), один проход
	// Память: O(1), кроме индексов и счётчиков

	best_index := -1 // лучшее место
	start := -1      // старт начала группы нулей
	max_len := 0     // длина самой длинной группы нулей

	for i := 0; i < len(arr); i++ {
		if arr[i] == 0 {
			// начало новой группы
			if start == -1 {
				start = i
			}
		} else {
			// конец группы, сбросим флаг в -1
			if start != -1 { // мы уже в нулях были
				length := i - start
				mid := start + (length-1)/2 // центр группы, всегда берём левую середину

				// обновим если это максимальная длина группы
				if length > max_len {
					max_len = length
					best_index = mid
				}
				start = -1 // сброс флага
			}
		}
	}
	return best_index
}

func main() {
	seats := []int{1, 0, 1, 0, 0, 0, 1}
	result := bestSeat(seats)
	fmt.Println(result) // Output: 4
}
